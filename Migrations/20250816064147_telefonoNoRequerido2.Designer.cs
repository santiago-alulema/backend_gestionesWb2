// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using gestiones_backend.Context;

#nullable disable

namespace gestiones_backend.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250816064147_telefonoNoRequerido2")]
    partial class telefonoNoRequerido2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("gestiones_backend.Entity.AbonoLiquidacion", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("AbonosLiquidacion");
                });

            modelBuilder.Entity("gestiones_backend.Entity.AsignacionesCartera", b =>
                {
                    b.Property<int>("IdAsignacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdAsignacion"));

                    b.Property<string>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("activo");

                    b.Property<DateOnly>("FechaAsignacion")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("FechaRetiro")
                        .HasColumnType("date");

                    b.Property<string>("IdCliente")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<Guid>("IdDeuda")
                        .HasColumnType("uuid");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.HasKey("IdAsignacion");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdDeuda");

                    b.ToTable("AsignacionesCarteras");
                });

            modelBuilder.Entity("gestiones_backend.Entity.BancosPagos", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("BancosPagos");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Cliente", b =>
                {
                    b.Property<string>("IdCliente")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Correo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Direccion")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TelefonoContacto")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("IdCliente");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("gestiones_backend.Entity.CompromisosPago", b =>
                {
                    b.Property<string>("IdCompromiso")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<bool?>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("FechaCompromiso")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("FechaCumplimientoReal")
                        .HasColumnType("date");

                    b.Property<Guid?>("IdDeuda")
                        .HasColumnType("uuid");

                    b.Property<string>("IdUsuario")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<bool?>("IncumplioCompromisoPago")
                        .HasColumnType("boolean");

                    b.Property<decimal>("MontoComprometido")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.HasKey("IdCompromiso");

                    b.HasIndex("IdDeuda");

                    b.HasIndex("IdUsuario");

                    b.ToTable("CompromisosPagos");
                });

            modelBuilder.Entity("gestiones_backend.Entity.ConsultasExterna", b =>
                {
                    b.Property<string>("IdDeudor")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<DateTime>("FechaConsulta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("IdUsuario")
                        .HasColumnType("character varying(13)");

                    b.Property<string>("JsonRespuesta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdDeudor");

                    b.HasIndex("IdUsuario");

                    b.ToTable("ConsultasExternas");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Deuda", b =>
                {
                    b.Property<Guid>("IdDeuda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Clasificacion")
                        .HasColumnType("text");

                    b.Property<int?>("Creditos")
                        .HasColumnType("integer");

                    b.Property<int?>("Descuento")
                        .HasColumnType("integer");

                    b.Property<decimal?>("DeudaCapital")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DiasMora")
                        .HasColumnType("integer");

                    b.Property<string>("Empresa")
                        .HasColumnType("text");

                    b.Property<string>("Estado")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("FechaUltimoPago")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("FechaVenta")
                        .HasColumnType("date");

                    b.Property<decimal?>("GastosCobranzas")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("IdDeudor")
                        .HasColumnType("character varying(13)");

                    b.Property<decimal?>("Interes")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MontoCobrar")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("NumeroCuotas")
                        .HasColumnType("integer");

                    b.Property<string>("NumeroFactura")
                        .HasColumnType("text");

                    b.Property<decimal?>("SaldoDeuda")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SaldoDeulda")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TipoDocumento")
                        .HasColumnType("text");

                    b.Property<string>("Tramo")
                        .HasColumnType("text");

                    b.Property<decimal?>("UltimoPago")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ValorCuota")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdDeuda");

                    b.HasIndex("IdDeudor");

                    b.ToTable("Deudas");
                });

            modelBuilder.Entity("gestiones_backend.Entity.DeudorTelefono", b =>
                {
                    b.Property<string>("IdDeudorTelefonos")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<bool?>("EsValido")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaAdicion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("IdDeudor")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Observacion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Origen")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.HasKey("IdDeudorTelefonos");

                    b.HasIndex("IdDeudor");

                    b.ToTable("DeudorTelefonos");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Deudores", b =>
                {
                    b.Property<string>("IdDeudor")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Correo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Direccion")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("IdUsuario")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("IdDeudor");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Deudores");
                });

            modelBuilder.Entity("gestiones_backend.Entity.FormaPago", b =>
                {
                    b.Property<string>("FormaPagoId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("FormaPagoId");

                    b.ToTable("FormasPago");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Gestione", b =>
                {
                    b.Property<string>("IdGestion")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("FechaGestion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("IdDeuda")
                        .HasColumnType("uuid");

                    b.Property<string>("IdRespuestaTipoContacto")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IdTipoContactoGestion")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IdTipoGestion")
                        .IsRequired()
                        .HasColumnType("character varying(40)");

                    b.Property<string>("IdUsuarioGestiona")
                        .IsRequired()
                        .HasColumnType("character varying(13)");

                    b.HasKey("IdGestion");

                    b.HasIndex("IdDeuda");

                    b.HasIndex("IdRespuestaTipoContacto");

                    b.HasIndex("IdTipoContactoGestion");

                    b.HasIndex("IdTipoGestion");

                    b.HasIndex("IdUsuarioGestiona");

                    b.ToTable("Gestiones");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Pago", b =>
                {
                    b.Property<int>("IdPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPago"));

                    b.Property<DateOnly?>("FechaPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("FormaPagoId")
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IdAbonoLiquidacion")
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IdBancosPago")
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("IdDeuda")
                        .HasColumnType("uuid");

                    b.Property<string>("IdTipoCuentaBancaria")
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IdTipoTransaccion")
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IdUsuario")
                        .HasColumnType("character varying(13)");

                    b.Property<string>("MedioPago")
                        .HasColumnType("text");

                    b.Property<decimal>("MontoPagado")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NumeroDocumenro")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("UsuarioIdUsuario")
                        .HasColumnType("character varying(13)");

                    b.HasKey("IdPago");

                    b.HasIndex("FormaPagoId");

                    b.HasIndex("IdAbonoLiquidacion");

                    b.HasIndex("IdBancosPago");

                    b.HasIndex("IdDeuda");

                    b.HasIndex("IdTipoCuentaBancaria");

                    b.HasIndex("IdTipoTransaccion");

                    b.HasIndex("IdUsuario");

                    b.HasIndex("UsuarioIdUsuario");

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("gestiones_backend.Entity.RespuestaTipoContacto", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("IdTipoContactoResultado")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoContactoResultado");

                    b.ToTable("RespuestasTipoContacto");
                });

            modelBuilder.Entity("gestiones_backend.Entity.TipoContactoGestion", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("TiposContactoGestion");
                });

            modelBuilder.Entity("gestiones_backend.Entity.TipoContactoResultado", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TipoResultadoId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("TipoResultadoId");

                    b.ToTable("TiposContactoResultado");
                });

            modelBuilder.Entity("gestiones_backend.Entity.TipoCuentaBancaria", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("TiposCuentaBancaria");
                });

            modelBuilder.Entity("gestiones_backend.Entity.TipoResultado", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("TiposResultado");
                });

            modelBuilder.Entity("gestiones_backend.Entity.TipoTransaccion", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("TiposTransaccion");
                });

            modelBuilder.Entity("gestiones_backend.Entity.TiposGestion", b =>
                {
                    b.Property<string>("IdTipoGestion")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool?>("Estado")
                        .HasColumnType("boolean");

                    b.Property<string>("IdPadre")
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TipoGestion")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.HasKey("IdTipoGestion");

                    b.HasIndex("IdPadre");

                    b.ToTable("TiposGestion");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Usuario", b =>
                {
                    b.Property<string>("IdUsuario")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("rol");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("IdUsuario");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("gestiones_backend.Entity.AsignacionesCartera", b =>
                {
                    b.HasOne("gestiones_backend.Entity.Cliente", "IdClienteNavigation")
                        .WithMany("AsignacionesCarteras")
                        .HasForeignKey("IdCliente")
                        .IsRequired();

                    b.HasOne("gestiones_backend.Entity.Deuda", "IdDeudaNavigation")
                        .WithMany("AsignacionesCarteras")
                        .HasForeignKey("IdDeuda")
                        .IsRequired();

                    b.Navigation("IdClienteNavigation");

                    b.Navigation("IdDeudaNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.CompromisosPago", b =>
                {
                    b.HasOne("gestiones_backend.Entity.Deuda", "IdDeudaNavigation")
                        .WithMany("CompromisosPagos")
                        .HasForeignKey("IdDeuda")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("gestiones_backend.Entity.Usuario", "IdUsuarioNavigation")
                        .WithMany("CompromisosPagos")
                        .HasForeignKey("IdUsuario")
                        .IsRequired();

                    b.Navigation("IdDeudaNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.ConsultasExterna", b =>
                {
                    b.HasOne("gestiones_backend.Entity.Deudores", "IdDeudorNavigation")
                        .WithMany()
                        .HasForeignKey("IdDeudor")
                        .IsRequired();

                    b.HasOne("gestiones_backend.Entity.Usuario", "IdUsuarioNavigation")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("IdDeudorNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Deuda", b =>
                {
                    b.HasOne("gestiones_backend.Entity.Deudores", "IdDeudorNavigation")
                        .WithMany("Deuda")
                        .HasForeignKey("IdDeudor")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("IdDeudorNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.DeudorTelefono", b =>
                {
                    b.HasOne("gestiones_backend.Entity.Deudores", "IdDeudorNavigation")
                        .WithMany("DeudorTelefonos")
                        .HasForeignKey("IdDeudor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdDeudorNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Deudores", b =>
                {
                    b.HasOne("gestiones_backend.Entity.Usuario", "Usuario")
                        .WithMany("Deudores")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Gestione", b =>
                {
                    b.HasOne("gestiones_backend.Entity.Deuda", "IdDeudaNavigation")
                        .WithMany("Gestiones")
                        .HasForeignKey("IdDeuda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gestiones_backend.Entity.RespuestaTipoContacto", "RespuestaTipoContactoNavigation")
                        .WithMany()
                        .HasForeignKey("IdRespuestaTipoContacto")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("gestiones_backend.Entity.TipoContactoGestion", "IdTipoContactoGestionNavigation")
                        .WithMany()
                        .HasForeignKey("IdTipoContactoGestion")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("gestiones_backend.Entity.TiposGestion", "IdTipoGestionNavigation")
                        .WithMany("Gestiones")
                        .HasForeignKey("IdTipoGestion")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("gestiones_backend.Entity.Usuario", "IdUsuarioGestionaNavigation")
                        .WithMany("Gestiones")
                        .HasForeignKey("IdUsuarioGestiona")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IdDeudaNavigation");

                    b.Navigation("IdTipoContactoGestionNavigation");

                    b.Navigation("IdTipoGestionNavigation");

                    b.Navigation("IdUsuarioGestionaNavigation");

                    b.Navigation("RespuestaTipoContactoNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Pago", b =>
                {
                    b.HasOne("gestiones_backend.Entity.FormaPago", "FormaPagoNavigation")
                        .WithMany()
                        .HasForeignKey("FormaPagoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("gestiones_backend.Entity.AbonoLiquidacion", "AbonoLiquidacionNavigation")
                        .WithMany()
                        .HasForeignKey("IdAbonoLiquidacion")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("gestiones_backend.Entity.BancosPagos", "BancosNavigation")
                        .WithMany()
                        .HasForeignKey("IdBancosPago")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("gestiones_backend.Entity.Deuda", "IdDeudaNavigation")
                        .WithMany("Pagos")
                        .HasForeignKey("IdDeuda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gestiones_backend.Entity.TipoCuentaBancaria", "TipoCuentaBancariaNavigation")
                        .WithMany()
                        .HasForeignKey("IdTipoCuentaBancaria")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("gestiones_backend.Entity.TipoTransaccion", "TipoTransaccionNavigation")
                        .WithMany()
                        .HasForeignKey("IdTipoTransaccion")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("gestiones_backend.Entity.Usuario", "IdUsuarioNavigation")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("gestiones_backend.Entity.Usuario", null)
                        .WithMany("Pagos")
                        .HasForeignKey("UsuarioIdUsuario");

                    b.Navigation("AbonoLiquidacionNavigation");

                    b.Navigation("BancosNavigation");

                    b.Navigation("FormaPagoNavigation");

                    b.Navigation("IdDeudaNavigation");

                    b.Navigation("IdUsuarioNavigation");

                    b.Navigation("TipoCuentaBancariaNavigation");

                    b.Navigation("TipoTransaccionNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.RespuestaTipoContacto", b =>
                {
                    b.HasOne("gestiones_backend.Entity.TipoContactoGestion", null)
                        .WithMany("RespuestaTipoContactos")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("gestiones_backend.Entity.TipoContactoResultado", "TipoContactoNavigatorNavigation")
                        .WithMany("TiposRespuestaNavigation")
                        .HasForeignKey("IdTipoContactoResultado")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TipoContactoNavigatorNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.TipoContactoResultado", b =>
                {
                    b.HasOne("gestiones_backend.Entity.TipoResultado", "TipoResultadoNavigation")
                        .WithMany("TiposConstactosNavigation")
                        .HasForeignKey("TipoResultadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TipoResultadoNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.TiposGestion", b =>
                {
                    b.HasOne("gestiones_backend.Entity.TiposGestion", "IdPadreNavigation")
                        .WithMany("InverseIdPadreNavigation")
                        .HasForeignKey("IdPadre")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("IdPadreNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Cliente", b =>
                {
                    b.Navigation("AsignacionesCarteras");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Deuda", b =>
                {
                    b.Navigation("AsignacionesCarteras");

                    b.Navigation("CompromisosPagos");

                    b.Navigation("Gestiones");

                    b.Navigation("Pagos");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Deudores", b =>
                {
                    b.Navigation("Deuda");

                    b.Navigation("DeudorTelefonos");
                });

            modelBuilder.Entity("gestiones_backend.Entity.TipoContactoGestion", b =>
                {
                    b.Navigation("RespuestaTipoContactos");
                });

            modelBuilder.Entity("gestiones_backend.Entity.TipoContactoResultado", b =>
                {
                    b.Navigation("TiposRespuestaNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.TipoResultado", b =>
                {
                    b.Navigation("TiposConstactosNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.TiposGestion", b =>
                {
                    b.Navigation("Gestiones");

                    b.Navigation("InverseIdPadreNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Usuario", b =>
                {
                    b.Navigation("CompromisosPagos");

                    b.Navigation("Deudores");

                    b.Navigation("Gestiones");

                    b.Navigation("Pagos");
                });
#pragma warning restore 612, 618
        }
    }
}
