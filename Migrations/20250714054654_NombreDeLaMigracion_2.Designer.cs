// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using gestiones_backend.Context;

#nullable disable

namespace gestiones_backend.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250714054654_NombreDeLaMigracion_2")]
    partial class NombreDeLaMigracion_2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("gestiones_backend.Entity.AsignacionesCartera", b =>
                {
                    b.Property<int>("IdAsignacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_asignacion");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdAsignacion"));

                    b.Property<string>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("estado")
                        .HasDefaultValueSql("'activo'::character varying");

                    b.Property<DateOnly>("FechaAsignacion")
                        .HasColumnType("date")
                        .HasColumnName("fecha_asignacion");

                    b.Property<DateOnly?>("FechaRetiro")
                        .HasColumnType("date")
                        .HasColumnName("fecha_retiro");

                    b.Property<string>("IdCliente")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("id_cliente");

                    b.Property<Guid>("IdDeuda")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("id_deuda");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text")
                        .HasColumnName("observaciones");

                    b.HasKey("IdAsignacion")
                        .HasName("asignaciones_cartera_pkey");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdDeuda");

                    b.ToTable("asignaciones_cartera", (string)null);
                });

            modelBuilder.Entity("gestiones_backend.Entity.Cliente", b =>
                {
                    b.Property<string>("IdCliente")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("id_cliente");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Correo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("correo");

                    b.Property<string>("Direccion")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("direccion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nombre");

                    b.Property<string>("TelefonoContacto")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telefono_contacto");

                    b.HasKey("IdCliente")
                        .HasName("clientes_pkey");

                    b.ToTable("clientes", (string)null);
                });

            modelBuilder.Entity("gestiones_backend.Entity.CompromisosPago", b =>
                {
                    b.Property<string>("IdCompromiso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id_compromiso")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("estado")
                        .HasDefaultValueSql("'pendiente'::character varying");

                    b.Property<DateOnly>("FechaCompromiso")
                        .HasColumnType("date")
                        .HasColumnName("fecha_compromiso");

                    b.Property<DateOnly?>("FechaCumplimientoReal")
                        .HasColumnType("date")
                        .HasColumnName("fecha_cumplimiento_real");

                    b.Property<Guid?>("IdDeuda")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("id_deuda");

                    b.Property<string>("IdUsuario")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("id_usuario");

                    b.Property<decimal>("MontoComprometido")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("monto_comprometido");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text")
                        .HasColumnName("observaciones");

                    b.HasKey("IdCompromiso")
                        .HasName("compromisos_pago_pkey");

                    b.HasIndex("IdDeuda");

                    b.HasIndex("IdUsuario");

                    b.ToTable("compromisos_pago", (string)null);
                });

            modelBuilder.Entity("gestiones_backend.Entity.ConsultasExterna", b =>
                {
                    b.Property<DateTime>("FechaConsulta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_consulta")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("IdDeudor")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("id_deudor");

                    b.Property<string>("IdUsuario")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("id_usuario");

                    b.Property<string>("JsonRespuesta")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("json_respuesta");

                    b.HasIndex("IdDeudor");

                    b.HasIndex("IdUsuario");

                    b.ToTable("consultas_externas", (string)null);
                });

            modelBuilder.Entity("gestiones_backend.Entity.Deuda", b =>
                {
                    b.Property<Guid>("IdDeuda")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("id_deuda")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<string>("Estado")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("estado");

                    b.Property<DateOnly?>("FechaAsignacion")
                        .HasColumnType("date")
                        .HasColumnName("fecha_asignacion");

                    b.Property<DateOnly>("FechaVencimiento")
                        .HasColumnType("date")
                        .HasColumnName("fecha_vencimiento");

                    b.Property<string>("IdDeudor")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("id_deudor");

                    b.Property<decimal>("MontoOriginal")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("monto_original");

                    b.Property<string>("NumeroAutorizacion")
                        .HasColumnType("text")
                        .HasColumnName("numero_autorizacion");

                    b.Property<string>("NumeroFactura")
                        .HasColumnType("text")
                        .HasColumnName("numero_factura");

                    b.Property<decimal>("SaldoActual")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("saldo_actual");

                    b.Property<decimal?>("TotalFactura")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("total_factura");

                    b.HasKey("IdDeuda")
                        .HasName("deudas_pkey");

                    b.HasIndex("IdDeudor");

                    b.ToTable("deudas", (string)null);
                });

            modelBuilder.Entity("gestiones_backend.Entity.DeudorTelefono", b =>
                {
                    b.Property<string>("IdDeudorTelefonos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id_deudor_telefonos")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool?>("EsValido")
                        .HasColumnType("boolean")
                        .HasColumnName("es_valido");

                    b.Property<DateTime>("FechaAdicion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_adicion")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("IdDeudor")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("id_deudor");

                    b.Property<string>("Observacion")
                        .HasColumnType("text")
                        .HasColumnName("observaciones");

                    b.Property<string>("Origen")
                        .HasColumnType("text")
                        .HasColumnName("origen");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("telefono");

                    b.HasKey("IdDeudorTelefonos")
                        .HasName("deudor_telefonos_pk");

                    b.HasIndex(new[] { "IdDeudor", "Telefono" }, "deudor_telefonos_unique")
                        .IsUnique();

                    b.ToTable("deudor_telefonos", (string)null);
                });

            modelBuilder.Entity("gestiones_backend.Entity.Deudores", b =>
                {
                    b.Property<string>("IdDeudor")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("id_deudor");

                    b.Property<string>("Correo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("correo");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<string>("Direccion")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("direccion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nombre");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telefono");

                    b.HasKey("IdDeudor")
                        .HasName("deudores_pkey");

                    b.ToTable("deudores", (string)null);
                });

            modelBuilder.Entity("gestiones_backend.Entity.Gestione", b =>
                {
                    b.Property<string>("IdGestion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id_gestion")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("FechaGestion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_gestion")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("IdDeuda")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("id_deuda");

                    b.Property<string>("IdTipoGestion")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id_tipo_gestion");

                    b.Property<string>("IdUsuarioGestiona")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("id_usuario_gestiona");

                    b.HasKey("IdGestion")
                        .HasName("gestiones_pkey");

                    b.HasIndex("IdDeuda");

                    b.HasIndex("IdTipoGestion");

                    b.HasIndex("IdUsuarioGestiona");

                    b.ToTable("gestiones", (string)null);
                });

            modelBuilder.Entity("gestiones_backend.Entity.Pago", b =>
                {
                    b.Property<int>("IdPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_pago");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPago"));

                    b.Property<DateOnly?>("FechaPago")
                        .HasColumnType("date")
                        .HasColumnName("fecha_pago");

                    b.Property<Guid>("IdDeuda")
                        .HasMaxLength(36)
                        .HasColumnType("uuid")
                        .HasColumnName("id_deuda");

                    b.Property<string>("MedioPago")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("medio_pago");

                    b.Property<decimal>("MontoPagado")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("monto_pagado");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text")
                        .HasColumnName("observaciones");

                    b.HasKey("IdPago")
                        .HasName("pagos_pkey");

                    b.HasIndex("IdDeuda");

                    b.ToTable("pagos", (string)null);
                });

            modelBuilder.Entity("gestiones_backend.Entity.TiposGestion", b =>
                {
                    b.Property<string>("IdTipoGestion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id_tipo_gestion")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<bool?>("Estado")
                        .HasColumnType("boolean")
                        .HasColumnName("estado");

                    b.Property<string>("IdPadre")
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id_padre");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nombre");

                    b.Property<string>("TipoGestion")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("tipo_gestion")
                        .HasComment("P Padre H Hijo");

                    b.HasKey("IdTipoGestion")
                        .HasName("tipos_gestion_pkey");

                    b.HasIndex("IdPadre");

                    b.ToTable("tipos_gestion", (string)null);
                });

            modelBuilder.Entity("gestiones_backend.Entity.Usuario", b =>
                {
                    b.Property<string>("IdUsuario")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("id_usuario");

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contrasena");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nombre");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("rol")
                        .HasDefaultValueSql("'U'::character varying")
                        .HasComment("U usuario A Admin");

                    b.HasKey("IdUsuario")
                        .HasName("usuarios_pkey");

                    b.ToTable("usuarios", (string)null);
                });

            modelBuilder.Entity("gestiones_backend.Entity.AsignacionesCartera", b =>
                {
                    b.HasOne("gestiones_backend.Entity.Cliente", "IdClienteNavigation")
                        .WithMany("AsignacionesCarteras")
                        .HasForeignKey("IdCliente")
                        .IsRequired()
                        .HasConstraintName("asignaciones_cartera_clientes_fk");

                    b.HasOne("gestiones_backend.Entity.Deuda", "IdDeudaNavigation")
                        .WithMany("AsignacionesCarteras")
                        .HasForeignKey("IdDeuda")
                        .IsRequired()
                        .HasConstraintName("asignaciones_cartera_deudas_fk");

                    b.Navigation("IdClienteNavigation");

                    b.Navigation("IdDeudaNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.CompromisosPago", b =>
                {
                    b.HasOne("gestiones_backend.Entity.Deuda", "IdDeudaNavigation")
                        .WithMany("CompromisosPagos")
                        .HasForeignKey("IdDeuda")
                        .HasConstraintName("compromisos_pago_deudas_fk");

                    b.HasOne("gestiones_backend.Entity.Usuario", "IdUsuarioNavigation")
                        .WithMany("CompromisosPagos")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("compromisos_pago_usuarios_fk");

                    b.Navigation("IdDeudaNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.ConsultasExterna", b =>
                {
                    b.HasOne("gestiones_backend.Entity.Deudores", "IdDeudorNavigation")
                        .WithMany()
                        .HasForeignKey("IdDeudor")
                        .HasConstraintName("consutlas_externas_deudores_fk");

                    b.HasOne("gestiones_backend.Entity.Usuario", "IdUsuarioNavigation")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("consutlas_externas_usuarios_fk");

                    b.Navigation("IdDeudorNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Deuda", b =>
                {
                    b.HasOne("gestiones_backend.Entity.Deudores", "IdDeudorNavigation")
                        .WithMany("Deuda")
                        .HasForeignKey("IdDeudor")
                        .HasConstraintName("deudas_deudores_fk");

                    b.Navigation("IdDeudorNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.DeudorTelefono", b =>
                {
                    b.HasOne("gestiones_backend.Entity.Deudores", "IdDeudorNavigation")
                        .WithMany("DeudorTelefonos")
                        .HasForeignKey("IdDeudor")
                        .IsRequired()
                        .HasConstraintName("deudor_telefonos_deudores_fk");

                    b.Navigation("IdDeudorNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Gestione", b =>
                {
                    b.HasOne("gestiones_backend.Entity.Deuda", "IdDeudaNavigation")
                        .WithMany("Gestiones")
                        .HasForeignKey("IdDeuda")
                        .IsRequired()
                        .HasConstraintName("gestiones_deudas_fk");

                    b.HasOne("gestiones_backend.Entity.TiposGestion", "IdTipoGestionNavigation")
                        .WithMany("Gestiones")
                        .HasForeignKey("IdTipoGestion")
                        .IsRequired()
                        .HasConstraintName("gestiones_id_tipo_gestion_fkey");

                    b.HasOne("gestiones_backend.Entity.Usuario", "IdUsuarioGestionaNavigation")
                        .WithMany("Gestiones")
                        .HasForeignKey("IdUsuarioGestiona")
                        .IsRequired()
                        .HasConstraintName("gestiones_usuarios_fk");

                    b.Navigation("IdDeudaNavigation");

                    b.Navigation("IdTipoGestionNavigation");

                    b.Navigation("IdUsuarioGestionaNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Pago", b =>
                {
                    b.HasOne("gestiones_backend.Entity.Deuda", "IdDeudaNavigation")
                        .WithMany("Pagos")
                        .HasForeignKey("IdDeuda")
                        .IsRequired()
                        .HasConstraintName("pagos_deudas_fk");

                    b.Navigation("IdDeudaNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.TiposGestion", b =>
                {
                    b.HasOne("gestiones_backend.Entity.TiposGestion", "IdPadreNavigation")
                        .WithMany("InverseIdPadreNavigation")
                        .HasForeignKey("IdPadre")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("tipos_gestion_id_padre_fkey");

                    b.Navigation("IdPadreNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Cliente", b =>
                {
                    b.Navigation("AsignacionesCarteras");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Deuda", b =>
                {
                    b.Navigation("AsignacionesCarteras");

                    b.Navigation("CompromisosPagos");

                    b.Navigation("Gestiones");

                    b.Navigation("Pagos");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Deudores", b =>
                {
                    b.Navigation("Deuda");

                    b.Navigation("DeudorTelefonos");
                });

            modelBuilder.Entity("gestiones_backend.Entity.TiposGestion", b =>
                {
                    b.Navigation("Gestiones");

                    b.Navigation("InverseIdPadreNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Usuario", b =>
                {
                    b.Navigation("CompromisosPagos");

                    b.Navigation("Gestiones");
                });
#pragma warning restore 612, 618
        }
    }
}
