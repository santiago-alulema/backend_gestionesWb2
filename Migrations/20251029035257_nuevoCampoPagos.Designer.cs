// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using gestiones_backend.Context;

#nullable disable

namespace gestiones_backend.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20251029035257_nuevoCampoPagos")]
    partial class nuevoCampoPagos
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("gestiones_backend.Entity.AbonoLiquidacion", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("CodigoExterno")
                        .HasColumnType("varchar");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("AbonosLiquidacion");
                });

            modelBuilder.Entity("gestiones_backend.Entity.AsignacionesCartera", b =>
                {
                    b.Property<int>("IdAsignacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdAsignacion"));

                    b.Property<string>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("activo");

                    b.Property<DateOnly>("FechaAsignacion")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("FechaRetiro")
                        .HasColumnType("date");

                    b.Property<string>("IdCliente")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<Guid>("IdDeuda")
                        .HasColumnType("uuid");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.HasKey("IdAsignacion");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdDeuda");

                    b.ToTable("AsignacionesCarteras");
                });

            modelBuilder.Entity("gestiones_backend.Entity.BancosPagos", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("BancosPagos");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Cliente", b =>
                {
                    b.Property<string>("IdCliente")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Correo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Direccion")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TelefonoContacto")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("IdCliente");

                    b.HasIndex("Cedula");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("gestiones_backend.Entity.CompromisosPago", b =>
                {
                    b.Property<string>("IdCompromiso")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<bool?>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("FechaCompromiso")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("FechaCumplimientoReal")
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("HoraRecordatorio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("IdDeuda")
                        .HasColumnType("uuid");

                    b.Property<string>("IdTipoTarea")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("IdUsuario")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<bool?>("IncumplioCompromisoPago")
                        .HasColumnType("boolean");

                    b.Property<decimal>("MontoComprometido")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<string>("Telefono")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar")
                        .HasDefaultValue("");

                    b.HasKey("IdCompromiso");

                    b.HasIndex("IdDeuda");

                    b.HasIndex("IdTipoTarea");

                    b.HasIndex("IdUsuario");

                    b.ToTable("CompromisosPagos");
                });

            modelBuilder.Entity("gestiones_backend.Entity.ConsultasExterna", b =>
                {
                    b.Property<string>("IdDeudor")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<DateTime>("FechaConsulta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("IdUsuario")
                        .HasColumnType("character varying(13)");

                    b.Property<string>("JsonRespuesta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdDeudor");

                    b.HasIndex("IdUsuario");

                    b.ToTable("ConsultasExternas");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Deuda", b =>
                {
                    b.Property<Guid>("IdDeuda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Agencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar")
                        .HasDefaultValue("");

                    b.Property<string>("Ciudad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar")
                        .HasDefaultValue("");

                    b.Property<string>("Clasificacion")
                        .HasColumnType("text");

                    b.Property<string>("CodigoEmpresa")
                        .HasColumnType("text");

                    b.Property<string>("CodigoOperacion")
                        .HasColumnType("varchar");

                    b.Property<int?>("Creditos")
                        .HasColumnType("integer");

                    b.Property<int?>("Descuento")
                        .HasColumnType("integer");

                    b.Property<decimal?>("DeudaCapital")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DiasMora")
                        .HasColumnType("integer");

                    b.Property<string>("Empresa")
                        .HasColumnType("text");

                    b.Property<bool?>("EsActivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bool")
                        .HasDefaultValue(true);

                    b.Property<string>("Estado")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateOnly?>("FechaUltimoPago")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("FechaVenta")
                        .HasColumnType("date");

                    b.Property<decimal?>("GastosCobranzas")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("IdDeudor")
                        .HasColumnType("character varying(36)");

                    b.Property<string>("IdUsuario")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<decimal?>("Interes")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MontoCobrar")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MontoCobrarPartes")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("NumeroCuotas")
                        .HasColumnType("integer");

                    b.Property<string>("NumeroFactura")
                        .HasColumnType("text");

                    b.Property<string>("ProductoDescripcion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar")
                        .HasDefaultValue("");

                    b.Property<decimal?>("SaldoDeuda")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TipoDocumento")
                        .HasColumnType("text");

                    b.Property<string>("Tramo")
                        .HasColumnType("text");

                    b.Property<decimal?>("UltimoPago")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ValorCuota")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdDeuda");

                    b.HasIndex("IdDeudor");

                    b.HasIndex("IdUsuario");

                    b.HasIndex("NumeroFactura");

                    b.ToTable("Deudas");
                });

            modelBuilder.Entity("gestiones_backend.Entity.DeudorTelefono", b =>
                {
                    b.Property<string>("IdDeudorTelefonos")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<bool?>("EsValido")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaAdicion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("IdDeudor")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Observacion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Origen")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Propietario")
                        .HasMaxLength(500)
                        .HasColumnType("varchar");

                    b.Property<string>("Telefono")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.HasKey("IdDeudorTelefonos");

                    b.HasIndex("IdDeudor");

                    b.ToTable("DeudorTelefonos");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Deudores", b =>
                {
                    b.Property<string>("IdDeudor")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("CodigoDeudor")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Correo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar");

                    b.Property<string>("Direccion")
                        .HasColumnType("varchar");

                    b.Property<string>("Empresa")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("IdUsuario")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("IdDeudor");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Deudores");
                });

            modelBuilder.Entity("gestiones_backend.Entity.EmailSmtpConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("SmtpHost")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("SmtpPort")
                        .HasColumnType("integer");

                    b.Property<int>("TimeoutSeconds")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(30);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("UseSsl")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseStartTls")
                        .HasColumnType("boolean");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasDatabaseName("UX_EmailConfig_Key_Active")
                        .HasFilter("\"IsActive\" = true");

                    b.HasIndex("Key", "IsActive")
                        .HasDatabaseName("IX_EmailConfig_Key_IsActive");

                    b.ToTable("EmailSmtpConfig", (string)null);
                });

            modelBuilder.Entity("gestiones_backend.Entity.FormaPago", b =>
                {
                    b.Property<string>("FormaPagoId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("FormaPagoId");

                    b.ToTable("FormasPago");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Gestione", b =>
                {
                    b.Property<string>("IdGestion")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(900)
                        .HasColumnType("character varying(900)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("FechaGestion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("IdDeuda")
                        .HasColumnType("uuid");

                    b.Property<string>("IdRespuestaTipoContacto")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IdTipoContactoResultado")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IdTipoResultado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdTipoResultadoNavigationId")
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IdUsuarioGestiona")
                        .IsRequired()
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Telefono")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar")
                        .HasDefaultValue("");

                    b.HasKey("IdGestion");

                    b.HasIndex("IdDeuda");

                    b.HasIndex("IdRespuestaTipoContacto");

                    b.HasIndex("IdTipoContactoResultado");

                    b.HasIndex("IdTipoResultadoNavigationId");

                    b.HasIndex("IdUsuarioGestiona");

                    b.ToTable("Gestiones");
                });

            modelBuilder.Entity("gestiones_backend.Entity.ImagenesCobros", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("NombreArchivo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("PagoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Tamanio")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("UrlRelativo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("PagoId");

                    b.ToTable("ImagenesCobros");
                });

            modelBuilder.Entity("gestiones_backend.Entity.MensajeWhatsappUsuario", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("MensajeCorreo")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<string>("TipoMensaje")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("MensajesWhatsapp");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Pago", b =>
                {
                    b.Property<Guid>("IdPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ArchivoMigracion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateOnly?>("FechaPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("FormaPagoId")
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IdAbonoLiquidacion")
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IdBancosPago")
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("IdDeuda")
                        .HasColumnType("uuid");

                    b.Property<string>("IdTipoCuentaBancaria")
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IdTipoTransaccion")
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IdUsuario")
                        .HasColumnType("character varying(13)");

                    b.Property<string>("MedioPago")
                        .HasColumnType("text");

                    b.Property<decimal>("MontoPagado")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NumeroDocumenro")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Telefono")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar")
                        .HasDefaultValue("");

                    b.Property<string>("UsuarioIdUsuario")
                        .HasColumnType("character varying(13)");

                    b.HasKey("IdPago");

                    b.HasIndex("FormaPagoId");

                    b.HasIndex("IdAbonoLiquidacion");

                    b.HasIndex("IdBancosPago");

                    b.HasIndex("IdDeuda");

                    b.HasIndex("IdTipoCuentaBancaria");

                    b.HasIndex("IdTipoTransaccion");

                    b.HasIndex("IdUsuario");

                    b.HasIndex("UsuarioIdUsuario");

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("gestiones_backend.Entity.RespuestaTipoContacto", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("CodigoEmpresaExterna")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("IdTipoContactoResultado")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoContactoResultado");

                    b.ToTable("RespuestasTipoContacto");
                });

            modelBuilder.Entity("gestiones_backend.Entity.TipoContactoGestion", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CodigoEmpresaExterna")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("TiposContactoGestion");
                });

            modelBuilder.Entity("gestiones_backend.Entity.TipoContactoResultado", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("CodigoEmpresaExterna")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TipoResultadoId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("TipoResultadoId");

                    b.ToTable("TiposContactoResultado");
                });

            modelBuilder.Entity("gestiones_backend.Entity.TipoCuentaBancaria", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("TiposCuentaBancaria");
                });

            modelBuilder.Entity("gestiones_backend.Entity.TipoResultado", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("CodigoEmpresaExterna")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("TiposResultado");
                });

            modelBuilder.Entity("gestiones_backend.Entity.TipoTarea", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CodigoExterno")
                        .HasColumnType("varchar");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TiposTareas");
                });

            modelBuilder.Entity("gestiones_backend.Entity.TipoTransaccion", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("TiposTransaccion");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Usuario", b =>
                {
                    b.Property<string>("IdUsuario")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("CodigoUsuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("rol");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("IdUsuario");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("gestiones_backend.Entity.temp_crecos.ArticuloOperacionCrecos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("CANTIDAD")
                        .HasColumnType("integer");

                    b.Property<string>("COD_OPERACION")
                        .HasColumnType("varchar");

                    b.Property<string>("COD_PRODUCTO")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DESC_PRODUCTO")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("ISECUENCIAL")
                        .HasColumnType("integer");

                    b.Property<string>("OBSERVACION")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id");

                    b.HasIndex("COD_OPERACION");

                    b.ToTable("ArticuloOperacionCrecos", "temp_crecos");
                });

            modelBuilder.Entity("gestiones_backend.Entity.temp_crecos.CarteraAsignadaCrecos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BARRIO")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("BCUOTAIMPAGA")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CANTON")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("CDESCRIPCION")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CNOMBRECOMPLETO")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CNUMEROIDENTIFICACION")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CODIGOCLIENTE")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COD_BARRIO")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COD_CANTON")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COD_EMPRESA")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COD_GESTOR")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COD_PAIS")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COD_PROVINCIA")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COD_TIPO_CARTERA")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COD_TIPO_GESTOR")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COD_UNIDAD_NEGOCIO")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COD_ZONA")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DFECHAVENCIMIENTO")
                        .HasColumnType("text");

                    b.Property<int?>("DIAS_MORA")
                        .HasColumnType("integer");

                    b.Property<string>("EMPRESA")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("GESTOR")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int?>("IANO")
                        .HasColumnType("integer");

                    b.Property<int?>("ICICLOCORTE")
                        .HasColumnType("integer");

                    b.Property<int?>("IMES")
                        .HasColumnType("integer");

                    b.Property<decimal?>("IVALORDEUDATOTAL")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("PAIS")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("PROVINCIA")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("TIPO_CARTERA")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("UNIDAD_NEGOCIO")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ZONA")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.HasIndex("CNUMEROIDENTIFICACION");

                    b.HasIndex("CODIGOCLIENTE");

                    b.HasIndex("IMES", "IANO");

                    b.ToTable("CarteraAsignadaCrecos", "temp_crecos");
                });

            modelBuilder.Entity("gestiones_backend.Entity.temp_crecos.CuotaOperacionCrecos", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar")
                        .HasColumnName("id");

                    b.Property<string>("CodCuota")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("COD_CUOTA");

                    b.Property<string>("CodEstadoCuota")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("COD_ESTADO_CUOTA");

                    b.Property<string>("CodEstadoRegistro")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("COD_ESTADO_REGISTRO");

                    b.Property<string>("CodOperacion")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("COD_OPERACION");

                    b.Property<DateTime?>("DFechaPostergacion")
                        .HasColumnType("date")
                        .HasColumnName("DFECHAPOSTERGACION");

                    b.Property<string>("DesEstadoRegistro")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("DES_ESTADO_REGISTRO");

                    b.Property<string>("DescEstadoOperacion")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("DESC_ESTADO_OPERACION");

                    b.Property<DateTime?>("FechaCorte")
                        .HasColumnType("date")
                        .HasColumnName("FECHA_CORTE");

                    b.Property<DateTime?>("FechaUltimoPago")
                        .HasColumnType("date")
                        .HasColumnName("FECHA_ULTIMO_PAGO");

                    b.Property<DateTime?>("FechaVencimiento")
                        .HasColumnType("date")
                        .HasColumnName("FECHA_VENCIMIENTO");

                    b.Property<decimal?>("IValorCuota")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("IVALORCUOTA");

                    b.Property<decimal?>("IValorTotalCuota")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("IVALORTOTALCUOTA");

                    b.Property<int>("NumeroCuota")
                        .HasColumnType("integer")
                        .HasColumnName("NUMERO_CUOTA");

                    b.Property<decimal?>("TasaMora")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("TASA_MORA");

                    b.Property<decimal?>("ValorCapitalInteres")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("VALOR_CAPITAL_INTERES");

                    b.Property<decimal?>("ValorCargos")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("VALOR_CARGOS");

                    b.Property<decimal?>("ValorOtrosCargos")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("VALOR_OTROS_CARGOS");

                    b.HasKey("Id");

                    b.HasIndex("CodOperacion")
                        .HasDatabaseName("IX_CuotasOperacion_CodOperacion");

                    b.ToTable("CuotasOperacionCrecos", "temp_crecos");
                });

            modelBuilder.Entity("gestiones_backend.Entity.temp_crecos.DatosClienteCrecos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CAPELLIDOMATERNO")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CAPELLIDOPATERNO")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CCODIGOCARGO")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CCODIGOCIUDADNACIMIENTO")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CCODIGOESTADOCIVIL")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CCODIGONACIONALIDAD")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CCODIGONIVELEDUCACION")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CCODIGOPAIS")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CCODIGOSEXO")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CCODIGOTIPOPERSONA")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CCODIGOTITULO")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CEXENTOIMPUESTO")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CNOMBRECOMPLETO")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CNOMBREEMPRESA")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CNUMEROIDENTIFICACION")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COD_TIPO_IDENTIF")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CPRIMERNOMBRE")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CRAZONCOMERCIAL")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CSEGUNDONOMBRE")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CSEPARACIONBIEN")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("DESCRIP_CARGO")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("DESCRIP_CIUDAD_NACIMIENTO")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("DESCRIP_ESTADO_CIVIL")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DESCRIP_NACIONALIDAD")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DESCRIP_NIVEL_EDUC")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("DESCRIP_PAIS")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DESCRIP_SEXO")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DESCRIP_TIPO_IDENTIF")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DESCRIP_TITULO")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("DFECHAINGRESOLAB")
                        .HasColumnType("text");

                    b.Property<string>("DFECHANACIMIENTO")
                        .HasColumnType("text");

                    b.Property<string>("ICODIGOCLIENTE")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("IEGRESO")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("IINGRESO")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("INUMEROCARGA")
                        .HasColumnType("integer");

                    b.Property<int?>("ISCORE")
                        .HasColumnType("integer");

                    b.Property<string>("TIPO_PERSONA")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CNUMEROIDENTIFICACION");

                    b.ToTable("DatosClienteCrecos", "temp_crecos");
                });

            modelBuilder.Entity("gestiones_backend.Entity.temp_crecos.DireccionClienteCrecos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AÑO_ANTIGUEDAD")
                        .HasColumnType("integer");

                    b.Property<string>("CALLE_SECUND")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CALLE_SECUND_2")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CCALLEPRINCIPAL")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CCASILLA")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CCORREOELECTRONICO")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("CDIRECCIONCARGA")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("CDIRECCIONCOMPLETA")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("CNUMEROCALLE")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CNUMEROIDENTIFICACION")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CNUMEROPISO")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("CNUMERO_SOLAR")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COBSERVACION")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("CODIGO_UBICACION")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COD_BARRIO")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COD_CANTON")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COD_INDICADOR_POSICION")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COD_PAIS")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COD_PARROQUIA")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COD_PROVINCIA")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COD_TIPO_ESPACIO")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COD_TIPO_NUMERACION")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COD_T_PROPIEDAD")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COFICINA_DEPARTAMENTO")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DESCRIP_BARRIO")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("DESCRIP_CANTON")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("DESCRIP_IND_POSICION")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("DESCRIP_PAIS")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("DESCRIP_PARROQUIA")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("DESCRIP_PROVINCIA")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("DESCRIP_TIPO_ESPACIO")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("DESCRIP_TIPO_NUMERACION")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("DESCRIP_TIPO_PROPIEDAD")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("DESCRIP_UBICACION")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int?>("DIAS_ANTIGUEDAD")
                        .HasColumnType("integer");

                    b.Property<string>("INDICADOR_PRINCIPAL")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int?>("INUMEROESPACIO")
                        .HasColumnType("integer");

                    b.Property<int?>("INUMEROSOLAR")
                        .HasColumnType("integer");

                    b.Property<int?>("MES_ANTIGUEDAD")
                        .HasColumnType("integer");

                    b.Property<string>("NOMBRE_EDIFICIO")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("PISO_BLOQUE")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("DireccionClienteCrecos", "temp_crecos");
                });

            modelBuilder.Entity("gestiones_backend.Entity.temp_crecos.OperacionesClientesCrecos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("COD_ESTADO_OPERACION")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COD_MONEDA")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("COD_OFICINA")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COD_PROD_FINANCIERO")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COD_T_CREDITO")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COD_T_OPERACION")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COD_VENDEDOR")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DESC_ESTADO_OPERACION")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("DESC_MONEDA")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DESC_OFICINA")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("DESC_T_CREDITO")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("DESC_T_OPERACION")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("DESC_VENDEDOR")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("DES_ESTADO_REGISTRO")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DES_PROD_FINANCIERO")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("ESTADO_REGISTRO")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("FECHA_FACTURA")
                        .HasColumnType("text");

                    b.Property<string>("FECHA_ULTIMO_VENCIMIENTO")
                        .HasColumnType("text");

                    b.Property<string>("FECHA_ULTMO_PAGO")
                        .HasColumnType("text");

                    b.Property<string>("ICODIGOOPERACION")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ICODIGO_OPERACION_NEGOCIACION")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("MONTO_CREDITO")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("NUMERO_SOLICITUD")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("NUM_CUOTAS")
                        .HasColumnType("integer");

                    b.Property<string>("NUM_FACTURA")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("N_IDENTIFICACION")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("SECUENC_CUPO")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TASA_INTERES")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("VALOR_FINANCIAR")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("N_IDENTIFICACION");

                    b.ToTable("OperacionesClientesCrecos", "temp_crecos");
                });

            modelBuilder.Entity("gestiones_backend.Entity.temp_crecos.ReferenciasPersonalesCrecos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CodCantonRef")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("COD_CANTON_REF");

                    b.Property<string>("CodPaisRef")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("COD_PAIS_REF");

                    b.Property<string>("CodProvinciaRef")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("COD_PROVINCIA_REF");

                    b.Property<string>("CodTipoIdentRef")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("COD_TIPO_IDENT_REF");

                    b.Property<string>("CodTipoVinculoRef")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("COD_TIPO_VINCULO_REF");

                    b.Property<string>("DescripCanton")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("DESCRIP_CANTON");

                    b.Property<string>("DescripPais")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("DESCRIP_PAIS");

                    b.Property<string>("DescripProvincia")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("DESCRIP_PROVINCIA");

                    b.Property<string>("DescripTipoIdentific")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("DESCRIPC_TIPO_IDENTIFIC");

                    b.Property<string>("DescripVinculo")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("DESCRIP_VINCULO");

                    b.Property<string>("DireccionRef")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("DIRECCION_REF");

                    b.Property<string>("NombreCompleto")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("CNOMBRECOMPLETO");

                    b.Property<string>("NombreReferencia")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("NOMBRE_REFERENCIA");

                    b.Property<string>("NumIdentificRef")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("NUM_IDENTIFIC_REF");

                    b.Property<string>("NumIdentificacion")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("NUM_IDENTIFICACION");

                    b.Property<string>("NumeroReferencia")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("NUMERO_REFERENCIA");

                    b.HasKey("Id");

                    b.ToTable("ReferenciasPersonalesCrecos", "temp_crecos");
                });

            modelBuilder.Entity("gestiones_backend.Entity.temp_crecos.SaldoClienteCrecos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CALIFICACION_CLIENTE")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CDESCRIPCIONTRAMO")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CDESCRIPCION_OFICINA")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CICLO_CORTE")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CNUMEROIDENTIFICACION")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CNUMEROTARJETA")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CODIGOCLIENTE")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COD_CARTERA")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COD_EMPRESA")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COD_GESTOR")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COD_OFICINA")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COD_OPERACION")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COD_TCREDITO")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("COD_U_NEGOCIO")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DESCP_EMPRESA")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DESCRIP_CARTERA")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DESCRIP_TCREDITO")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DESC_CICLOCORTE")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("DESC_GESTOR")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DESC_U_NEGOCIO")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DFECHAEJECUCION")
                        .HasColumnType("text");

                    b.Property<int?>("DIAS_VENCIDOS")
                        .HasColumnType("integer");

                    b.Property<string>("FECHA_INGRESO")
                        .HasColumnType("text");

                    b.Property<string>("FECHA_MAX_PAGO")
                        .HasColumnType("text");

                    b.Property<string>("FECHA_ULT_PAGO")
                        .HasColumnType("text");

                    b.Property<string>("F_ULTIMO_CORTE")
                        .HasColumnType("text");

                    b.Property<int?>("IANO")
                        .HasColumnType("integer");

                    b.Property<int?>("IMES")
                        .HasColumnType("integer");

                    b.Property<int?>("ITRAMO")
                        .HasColumnType("integer");

                    b.Property<string>("NEGOCIACION_ACTIVA")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PRIMERA_CUOTA_VENCIDA")
                        .HasColumnType("text");

                    b.Property<decimal?>("VALOR_CORRIENTE")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("VALOR_DEUDA")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("VALOR_GESTION")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("VALOR_MORA")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("VALOR_PAGO_MINIMO")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("VALOR_PAGO_MINIMO_ACTUALIZADO")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("VALOR_POR_VENCER")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("VALOR_VENCIDO")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("VALOR_VENCIDO_CORTEANTERIOR")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("VAL_ULT_PAGO")
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CNUMEROIDENTIFICACION");

                    b.ToTable("SaldoClienteCrecos", "temp_crecos");
                });

            modelBuilder.Entity("gestiones_backend.Entity.temp_crecos.TelefonosClienteCrecos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CNumero")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("CNUMERO");

                    b.Property<string>("CNumeroIdentificacion")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("CNUMEROIDENTIFICACION");

                    b.Property<string>("CPrefijo")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("CPREFIJO");

                    b.Property<string>("CodTipoTelefono")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("COD_TIPO_TELEFONO");

                    b.Property<string>("CodUbicacion")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("COD_UBICACION");

                    b.Property<string>("DescripUbicacion")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("DESCRIP_UBICACION");

                    b.Property<int>("ISECUENCIA")
                        .HasColumnType("integer")
                        .HasColumnName("ISECUENCIA");

                    b.Property<string>("TipoTelefono")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("TIPO_TELEFONO");

                    b.HasKey("Id");

                    b.HasIndex("CNumeroIdentificacion");

                    b.ToTable("TelefonosClienteCrecos", "temp_crecos");
                });

            modelBuilder.Entity("gestiones_backend.Entity.temp_crecos.TrifocusCrecos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Calificacion")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("Calificacion");

                    b.Property<string>("Cargo")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("Cargo");

                    b.Property<string>("CelularDomicilio")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("CelularDomicilio");

                    b.Property<string>("CelularNegocio")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("CelularNegocio");

                    b.Property<string>("CelularTrabajo")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("CelularTrabajo");

                    b.Property<string>("Ciudad")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("Ciudad");

                    b.Property<string>("CodigoCliente")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CodigoCliente");

                    b.Property<bool?>("DeudaRefinanciada")
                        .HasColumnType("boolean")
                        .HasColumnName("DeudaRefinanciada");

                    b.Property<decimal?>("DeudaTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("DeudaTotal");

                    b.Property<int?>("DiasVencidosActuales")
                        .HasColumnType("integer")
                        .HasColumnName("DiasVencidosActuales");

                    b.Property<int?>("DiasVencidosIniciodeMes")
                        .HasColumnType("integer")
                        .HasColumnName("DiasVencidosIniciodeMes");

                    b.Property<string>("DireccionDomicilio")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("DireccionDomicilio");

                    b.Property<string>("DireccionNegocio")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("DireccionNegocio");

                    b.Property<string>("DireccionTrabajo")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("DireccionTrabajo");

                    b.Property<string>("EstadoCivil")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("EstadoCivil");

                    b.Property<DateOnly?>("FechaCompromisodePago")
                        .HasColumnType("date")
                        .HasColumnName("FechaCompromisodePago");

                    b.Property<DateOnly?>("FechaUltimoPago")
                        .HasColumnType("date")
                        .HasColumnName("FechaUltimoPago");

                    b.Property<string>("Formalidad")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("Formalidad");

                    b.Property<DateOnly?>("GestionTelefonicaAnterior")
                        .HasColumnType("date")
                        .HasColumnName("gestionTelefonicaAnterior");

                    b.Property<DateOnly?>("GestionTerrenaAnterior")
                        .HasColumnType("date")
                        .HasColumnName("gestionTerrenaAnterior");

                    b.Property<string>("GestorAsignado")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("GestorAsignado");

                    b.Property<string>("IdentificacionCliente")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("IdentificacionCliente");

                    b.Property<decimal?>("MontoCarteraAsignada")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("MontoCarteraAsignada");

                    b.Property<decimal?>("MontoCobrado")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("MontoCobrado");

                    b.Property<decimal?>("MontoUltimoPagado")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("MontoUltimoPagado");

                    b.Property<int?>("NoCorte")
                        .HasColumnType("integer")
                        .HasColumnName("NoCorte");

                    b.Property<int?>("NoCuotasPagadas")
                        .HasColumnType("integer")
                        .HasColumnName("NoCuotasPagadas");

                    b.Property<int?>("NoGestiones")
                        .HasColumnType("integer")
                        .HasColumnName("NoGestiones");

                    b.Property<string>("NombreCliente")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("NombreCliente");

                    b.Property<string>("NombreTrabajo")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("NombreTrabajo");

                    b.Property<string>("Operacion")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("Operacion");

                    b.Property<decimal?>("PagoMinimo")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("PagoMinimo");

                    b.Property<bool?>("PoseeVehiculo")
                        .HasColumnType("boolean")
                        .HasColumnName("PoseeVehiculo");

                    b.Property<string>("Referencia1")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("Referencia1");

                    b.Property<string>("Referencia2")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("Referencia2");

                    b.Property<decimal?>("SaldoVencido")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("SaldoVencido");

                    b.Property<string>("Semaforo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Semaforo");

                    b.Property<string>("TRAMO")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("TRAMO");

                    b.Property<string>("TelefonoDomicilio")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("TelefonoDomicilio");

                    b.Property<string>("TelefonoNegocio")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("TelefonoNegocio");

                    b.Property<string>("TelefonoReferencia1")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("TelefonoReferencia1");

                    b.Property<string>("TelefonoReferencia2")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("TelefonoReferencia2");

                    b.Property<string>("TelefonoTrabajo")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("TelefonoTrabajo");

                    b.Property<string>("TipoCredito")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("TipoCredito");

                    b.Property<string>("TramoActual")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("TramoActual");

                    b.Property<DateOnly?>("UltimaGestionTelefonica")
                        .HasColumnType("date")
                        .HasColumnName("ultimaGestionTelefonica");

                    b.Property<DateOnly?>("UltimaGestionTerrena")
                        .HasColumnType("date")
                        .HasColumnName("ultimaGestionTerrena");

                    b.Property<string>("UsuarioGenera")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("UsuarioGenera");

                    b.Property<decimal?>("ValLiquidacion")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("Valliquidacion");

                    b.Property<decimal?>("ValLiquidacionPartes")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("Valliquidacionpartes");

                    b.HasKey("Id");

                    b.HasIndex("CodigoCliente");

                    b.HasIndex("IdentificacionCliente");

                    b.HasIndex("Operacion", "CodigoCliente")
                        .HasDatabaseName("ix_operacion_cliente");

                    b.ToTable("TrifocusCrecos", "temp_crecos");
                });

            modelBuilder.Entity("gestiones_backend.Entity.AsignacionesCartera", b =>
                {
                    b.HasOne("gestiones_backend.Entity.Cliente", "IdClienteNavigation")
                        .WithMany("AsignacionesCarteras")
                        .HasForeignKey("IdCliente")
                        .IsRequired();

                    b.HasOne("gestiones_backend.Entity.Deuda", "IdDeudaNavigation")
                        .WithMany("AsignacionesCarteras")
                        .HasForeignKey("IdDeuda")
                        .IsRequired();

                    b.Navigation("IdClienteNavigation");

                    b.Navigation("IdDeudaNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.CompromisosPago", b =>
                {
                    b.HasOne("gestiones_backend.Entity.Deuda", "IdDeudaNavigation")
                        .WithMany("CompromisosPagos")
                        .HasForeignKey("IdDeuda")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("gestiones_backend.Entity.TipoTarea", "IdTipoTareaNavigation")
                        .WithMany("CompromisosPagos")
                        .HasForeignKey("IdTipoTarea")
                        .IsRequired();

                    b.HasOne("gestiones_backend.Entity.Usuario", "IdUsuarioNavigation")
                        .WithMany("CompromisosPagos")
                        .HasForeignKey("IdUsuario")
                        .IsRequired();

                    b.Navigation("IdDeudaNavigation");

                    b.Navigation("IdTipoTareaNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.ConsultasExterna", b =>
                {
                    b.HasOne("gestiones_backend.Entity.Deudores", "IdDeudorNavigation")
                        .WithMany()
                        .HasForeignKey("IdDeudor")
                        .IsRequired();

                    b.HasOne("gestiones_backend.Entity.Usuario", "IdUsuarioNavigation")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("IdDeudorNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Deuda", b =>
                {
                    b.HasOne("gestiones_backend.Entity.Deudores", "IdDeudorNavigation")
                        .WithMany("Deuda")
                        .HasForeignKey("IdDeudor")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("gestiones_backend.Entity.Usuario", "Usuario")
                        .WithMany("Deudas")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("IdDeudorNavigation");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("gestiones_backend.Entity.DeudorTelefono", b =>
                {
                    b.HasOne("gestiones_backend.Entity.Deudores", "IdDeudorNavigation")
                        .WithMany("DeudorTelefonos")
                        .HasForeignKey("IdDeudor")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("IdDeudorNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Deudores", b =>
                {
                    b.HasOne("gestiones_backend.Entity.Usuario", "Usuario")
                        .WithMany("Deudores")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Gestione", b =>
                {
                    b.HasOne("gestiones_backend.Entity.Deuda", "IdDeudaNavigation")
                        .WithMany("Gestiones")
                        .HasForeignKey("IdDeuda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gestiones_backend.Entity.RespuestaTipoContacto", "RespuestaTipoContactoNavigation")
                        .WithMany()
                        .HasForeignKey("IdRespuestaTipoContacto")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("gestiones_backend.Entity.TipoContactoResultado", "IdTipoContactoResultadoNavigation")
                        .WithMany()
                        .HasForeignKey("IdTipoContactoResultado")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("gestiones_backend.Entity.TipoResultado", "IdTipoResultadoNavigation")
                        .WithMany()
                        .HasForeignKey("IdTipoResultadoNavigationId");

                    b.HasOne("gestiones_backend.Entity.Usuario", "IdUsuarioGestionaNavigation")
                        .WithMany("Gestiones")
                        .HasForeignKey("IdUsuarioGestiona")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IdDeudaNavigation");

                    b.Navigation("IdTipoContactoResultadoNavigation");

                    b.Navigation("IdTipoResultadoNavigation");

                    b.Navigation("IdUsuarioGestionaNavigation");

                    b.Navigation("RespuestaTipoContactoNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.ImagenesCobros", b =>
                {
                    b.HasOne("gestiones_backend.Entity.Pago", "Pago")
                        .WithMany("ImagenesCobrosNavigation")
                        .HasForeignKey("PagoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pago");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Pago", b =>
                {
                    b.HasOne("gestiones_backend.Entity.FormaPago", "FormaPagoNavigation")
                        .WithMany()
                        .HasForeignKey("FormaPagoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("gestiones_backend.Entity.AbonoLiquidacion", "AbonoLiquidacionNavigation")
                        .WithMany()
                        .HasForeignKey("IdAbonoLiquidacion")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("gestiones_backend.Entity.BancosPagos", "BancosNavigation")
                        .WithMany()
                        .HasForeignKey("IdBancosPago")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("gestiones_backend.Entity.Deuda", "IdDeudaNavigation")
                        .WithMany("Pagos")
                        .HasForeignKey("IdDeuda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gestiones_backend.Entity.TipoCuentaBancaria", "TipoCuentaBancariaNavigation")
                        .WithMany()
                        .HasForeignKey("IdTipoCuentaBancaria")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("gestiones_backend.Entity.TipoTransaccion", "TipoTransaccionNavigation")
                        .WithMany()
                        .HasForeignKey("IdTipoTransaccion")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("gestiones_backend.Entity.Usuario", "IdUsuarioNavigation")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("gestiones_backend.Entity.Usuario", null)
                        .WithMany("Pagos")
                        .HasForeignKey("UsuarioIdUsuario");

                    b.Navigation("AbonoLiquidacionNavigation");

                    b.Navigation("BancosNavigation");

                    b.Navigation("FormaPagoNavigation");

                    b.Navigation("IdDeudaNavigation");

                    b.Navigation("IdUsuarioNavigation");

                    b.Navigation("TipoCuentaBancariaNavigation");

                    b.Navigation("TipoTransaccionNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.RespuestaTipoContacto", b =>
                {
                    b.HasOne("gestiones_backend.Entity.TipoContactoGestion", null)
                        .WithMany("RespuestaTipoContactos")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("gestiones_backend.Entity.TipoContactoResultado", "TipoContactoNavigatorNavigation")
                        .WithMany("TiposRespuestaNavigation")
                        .HasForeignKey("IdTipoContactoResultado")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TipoContactoNavigatorNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.TipoContactoResultado", b =>
                {
                    b.HasOne("gestiones_backend.Entity.TipoResultado", "TipoResultadoNavigation")
                        .WithMany("TiposConstactosNavigation")
                        .HasForeignKey("TipoResultadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TipoResultadoNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Cliente", b =>
                {
                    b.Navigation("AsignacionesCarteras");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Deuda", b =>
                {
                    b.Navigation("AsignacionesCarteras");

                    b.Navigation("CompromisosPagos");

                    b.Navigation("Gestiones");

                    b.Navigation("Pagos");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Deudores", b =>
                {
                    b.Navigation("Deuda");

                    b.Navigation("DeudorTelefonos");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Pago", b =>
                {
                    b.Navigation("ImagenesCobrosNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.TipoContactoGestion", b =>
                {
                    b.Navigation("RespuestaTipoContactos");
                });

            modelBuilder.Entity("gestiones_backend.Entity.TipoContactoResultado", b =>
                {
                    b.Navigation("TiposRespuestaNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.TipoResultado", b =>
                {
                    b.Navigation("TiposConstactosNavigation");
                });

            modelBuilder.Entity("gestiones_backend.Entity.TipoTarea", b =>
                {
                    b.Navigation("CompromisosPagos");
                });

            modelBuilder.Entity("gestiones_backend.Entity.Usuario", b =>
                {
                    b.Navigation("CompromisosPagos");

                    b.Navigation("Deudas");

                    b.Navigation("Deudores");

                    b.Navigation("Gestiones");

                    b.Navigation("Pagos");
                });
#pragma warning restore 612, 618
        }
    }
}
